import json
import requests
import os
from typing import Dict, Any
import psycopg2
from psycopg2.extras import RealDictCursor

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ Telegram Bot API —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
    Args: event - dict —Å httpMethod, body, headers
          context - –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ request_id, function_name
    Returns: HTTP response dict
    '''
    method: str = event.get('httpMethod', 'GET')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS OPTIONS –∑–∞–ø—Ä–æ—Å–∞
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-User-Id, X-Auth-Token, X-User-Token',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Method not allowed'}),
            'isBase64Encoded': False
        }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers = event.get('headers', {})
        user_id = headers.get('x-user-id') or headers.get('X-User-Id')
        
        if not user_id:
            return {
                'statusCode': 401,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}),
                'isBase64Encoded': False
            }
        
        # Telegram Bot —Ç–æ–∫–µ–Ω –∏ ID –∫–ª–∏–µ–Ω—Ç–∞
        BOT_TOKEN = '8286818285:AAGqkSsTlsbKCT1guKYoDpkL_OcldAVyuSE'
        CLIENT_ID = '5215501225'
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        body = event.get('body', '')
        
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if body:
            # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–µ–º–æ
            if 'comments=' in body:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                comments_start = body.find('comments=') + 9
                comments_end = body.find('&', comments_start)
                if comments_end == -1:
                    comments_end = len(body)
                comments = body[comments_start:comments_end]
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded –¥–∞–Ω–Ω—ã–µ
                comments = comments.replace('+', ' ').replace('%20', ' ')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = f"üé• –ù–æ–≤—ã–π –≤–∏–¥–µ–æ-–ª–∏–¥\n\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n{comments}\n\n‚è∞ ID –∑–∞–ø—Ä–æ—Å–∞: {context.request_id}"
                
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
                DATABASE_URL = os.environ.get('DATABASE_URL')
                if DATABASE_URL:
                    conn = psycopg2.connect(DATABASE_URL)
                    conn.autocommit = True
                    cursor = conn.cursor(cursor_factory=RealDictCursor)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –≤ –ë–î
                    cursor.execute(
                        "INSERT INTO user_videos (user_id, filename, comments, telegram_sent) VALUES (%s, %s, %s, %s) RETURNING id",
                        (int(user_id), 'video_' + context.request_id, comments, False)
                    )
                    video_id = cursor.fetchone()['id']
                    
                    cursor.close()
                    conn.close()
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
                telegram_url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
                
                telegram_data = {
                    'chat_id': CLIENT_ID,
                    'text': message_text
                }
                
                response = requests.post(telegram_url, json=telegram_data, timeout=10)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
                if DATABASE_URL and response.status_code == 200:
                    conn = psycopg2.connect(DATABASE_URL)
                    conn.autocommit = True
                    cursor = conn.cursor()
                    cursor.execute("UPDATE user_videos SET telegram_sent = %s WHERE id = %s", (True, video_id))
                    cursor.close()
                    conn.close()
                
                if response.status_code == 200:
                    return {
                        'statusCode': 200,
                        'headers': {
                            'Content-Type': 'application/json',
                            'Access-Control-Allow-Origin': '*'
                        },
                        'body': json.dumps({
                            'success': True,
                            'message': '–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram',
                            'request_id': context.request_id
                        }),
                        'isBase64Encoded': False
                    }
                else:
                    return {
                        'statusCode': 500,
                        'headers': {
                            'Content-Type': 'application/json',
                            'Access-Control-Allow-Origin': '*'
                        },
                        'body': json.dumps({
                            'error': '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram',
                            'details': response.text
                        }),
                        'isBase64Encoded': False
                    }
            else:
                return {
                    'statusCode': 400,
                    'headers': {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    'body': json.dumps({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'}),
                    'isBase64Encoded': False
                }
        else:
            return {
                'statusCode': 400,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({'error': '–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞'}),
                'isBase64Encoded': False
            }
            
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                'details': str(e)
            }),
            'isBase64Encoded': False
        }