import json
import requests
import base64
from typing import Dict, Any

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ Telegram Bot API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞–Ω–∫–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    Args: event - dict —Å httpMethod, body, headers
          context - –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ request_id, function_name
    Returns: HTTP response dict
    '''
    method: str = event.get('httpMethod', 'GET')
    
    # Handle CORS OPTIONS request
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Method not allowed'}),
            'isBase64Encoded': False
        }
    
    try:
        # Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        BOT_TOKEN = '8286818285:AAGqkSsTlsbKCT1guKYoDpkL_OcldAVyuSE'
        CLIENT_ID = '5215501225'
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        body = event.get('body', '')
        headers = event.get('headers', {})
        content_type = headers.get('content-type', headers.get('Content-Type', ''))
        
        print(f"Content-Type: {content_type}")
        print(f"Body type: {type(body)}, length: {len(str(body))}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ multipart - –ø–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        if 'multipart/form-data' in content_type:
            message_text = f"üé• –ù–æ–≤—ã–π –≤–∏–¥–µ–æ-–ª–∏–¥\n\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: –ü–æ–ª—É—á–µ–Ω–æ multipart —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n\n‚è∞ ID –∑–∞–ø—Ä–æ—Å–∞: {context.request_id}"
        else:
            # –ü–∞—Ä—Å–∏–º –æ–±—ã—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            if 'comments=' in str(body):
                comments_start = str(body).find('comments=') + 9
                comments_end = str(body).find('&', comments_start)
                if comments_end == -1:
                    comments_end = len(str(body))
                comments = str(body)[comments_start:comments_end]
                comments = comments.replace('+', ' ').replace('%20', ' ')
            else:
                comments = "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
            
            message_text = f"üé• –ù–æ–≤—ã–π –≤–∏–¥–µ–æ-–ª–∏–¥\n\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n{comments}\n\n‚è∞ ID –∑–∞–ø—Ä–æ—Å–∞: {context.request_id}"
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        telegram_url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
        
        telegram_data = {
            'chat_id': CLIENT_ID,
            'text': message_text
        }
        
        response = requests.post(telegram_url, json=telegram_data, timeout=10)
        
        if response.status_code == 200:
            return {
                'statusCode': 200,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({
                    'success': True,
                    'message': '–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram',
                    'request_id': context.request_id
                }),
                'isBase64Encoded': False
            }
        else:
            return {
                'statusCode': 500,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({
                    'error': '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram',
                    'details': response.text
                }),
                'isBase64Encoded': False
            }
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                'details': str(e)
            }),
            'isBase64Encoded': False
        }