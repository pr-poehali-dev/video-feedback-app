import React, { useState, useRef, useCallback, useEffect } from 'react';
import Icon from '@/components/ui/icon';
import { Progress } from '@/components/ui/progress';

interface VideoRecordingState {
  isRecording: boolean;
  recordedBlob: Blob | null;
  stream: MediaStream | null;
}

interface LocationData {
  latitude: number;
  longitude: number;
  accuracy?: number;
}



const Index = () => {
  const [comments, setComments] = useState('');
  const [videoState, setVideoState] = useState<VideoRecordingState>({
    isRecording: false,
    recordedBlob: null,
    stream: null,
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [isSuccess, setIsSuccess] = useState(false);
  const [location, setLocation] = useState<LocationData | null>(null);
  
  const videoRef = useRef<HTMLVideoElement>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const chunksRef = useRef<Blob[]>([]);

  // –§—É–Ω–∫—Ü–∏—è —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ –¥–ª—è Android
  const compressVideoForAndroid = useCallback(async (originalBlob: Blob, mimeType: string): Promise<Blob> => {
    return new Promise((resolve) => {
      const video = document.createElement('video');
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d')!;
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç URL –¥–ª—è –≤–∏–¥–µ–æ
      const videoUrl = URL.createObjectURL(originalBlob);
      video.src = videoUrl;
      video.muted = true;
      
      video.onloadedmetadata = () => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—â–µ –º–µ–Ω—å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–∂–∞—Ç–∏—è
        const targetWidth = 320;  // 320p –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è
        const targetHeight = Math.floor((video.videoHeight / video.videoWidth) * targetWidth);
        
        canvas.width = targetWidth;
        canvas.height = targetHeight;
        
        console.log(`üîß –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ: ${video.videoWidth}x${video.videoHeight} ‚Üí ${targetWidth}x${targetHeight}`);
        
        const chunks: Blob[] = [];
        const stream = canvas.captureStream(10); // 10 FPS –¥–ª—è —Å–∂–∞—Ç–∏—è
        
        const recorder = new MediaRecorder(stream, {
          mimeType: 'video/webm;codecs=vp8', // –ò—Å–ø–æ–ª—å–∑—É–µ–º WebM –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∂–∞—Ç–∏—è
          videoBitsPerSecond: 80000, // –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç - 80kbps
        });
        
        recorder.ondataavailable = (e) => {
          if (e.data.size > 0) chunks.push(e.data);
        };
        
        recorder.onstop = () => {
          const compressedBlob = new Blob(chunks, { type: 'video/webm' });
          console.log(`‚úÖ –í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: ${(originalBlob.size/1024/1024).toFixed(1)}MB ‚Üí ${(compressedBlob.size/1024/1024).toFixed(1)}MB`);
          
          // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
          URL.revokeObjectURL(videoUrl);
          resolve(compressedBlob);
        };
        
        recorder.start();
        video.play();
        
        // –†–∏—Å—É–µ–º –∫–∞–¥—Ä—ã –Ω–∞ canvas
        const drawFrame = () => {
          if (!video.paused && !video.ended) {
            ctx.drawImage(video, 0, 0, targetWidth, targetHeight);
            requestAnimationFrame(drawFrame);
          } else {
            recorder.stop();
          }
        };
        
        video.onplay = () => drawFrame();
      };
    });
  }, []);

  const startRecording = useCallback(async () => {
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      console.log('–ó–∞–ø—Ä–æ—Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');
      try {
        const position = await new Promise<GeolocationPosition>((resolve, reject) => {
          navigator.geolocation.getCurrentPosition(resolve, reject, {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 60000
          });
        });
        
        const locationData: LocationData = {
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
          accuracy: position.coords.accuracy
        };
        
        setLocation(locationData);
        console.log('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', locationData);
      } catch (locationError) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:', locationError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
      }

      console.log('–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ...');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      const isAndroid = /Android/i.test(navigator.userAgent);
      console.log('Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', isAndroid);
      
      const stream = await navigator.mediaDevices.getUserMedia({
        video: {
          facingMode: 'environment',
          width: { ideal: isAndroid ? 426 : 640 },    // 240p –¥–ª—è Android (426x240)
          height: { ideal: isAndroid ? 240 : 360 },   // 240p –¥–ª—è Android
          frameRate: { ideal: isAndroid ? 15 : 30 },  // –ú–µ–Ω—å—à–µ FPS –¥–ª—è Android
        },
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          sampleRate: isAndroid ? 16000 : 48000,      // –ú–µ–Ω—å—à–µ —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è Android
          channelCount: 1,                            // –ú–æ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        },
      });
      console.log('–ü–æ–ª—É—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ');

      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        videoRef.current.play();
      }

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è Android (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Telegram)
      const supportedFormats = isAndroid ? [
        'video/mp4;codecs=avc1.42E01E,mp4a.40.2',  // H.264 Baseline Profile + AAC-LC (—Å–∞–º—ã–π —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
        'video/mp4;codecs=h264,aac',               // H.264 + AAC
        'video/mp4',                               // MP4 –±–∞–∑–æ–≤—ã–π
        'video/webm;codecs=vp8,opus',             // VP8 –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –¥–ª—è —Å—Ç–∞—Ä—ã—Ö Android
        ''  // Default format
      ] : [
        'video/mp4;codecs=h264,aac',
        'video/mp4',
        'video/webm;codecs=vp9,opus',
        'video/webm;codecs=vp8,opus',
        'video/webm',
        ''  // Default format
      ];
      
      let selectedFormat = '';
      console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã...');
      for (const format of supportedFormats) {
        const isSupported = MediaRecorder.isTypeSupported(format);
        console.log(`–§–æ—Ä–º–∞—Ç "${format}": ${isSupported ? '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' : '–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}`);
        if (isSupported && !selectedFormat) {
          selectedFormat = format;
          console.log(`‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç: ${format || 'default'}`);
        }
      }

      console.log('–°–æ–∑–¥–∞—é MediaRecorder —Å —Ñ–æ—Ä–º–∞—Ç–æ–º:', selectedFormat || 'default');
      const mediaRecorder = new MediaRecorder(stream, {
        mimeType: selectedFormat || undefined,
        videoBitsPerSecond: isAndroid ? 200000 : 500000,  // 200kbps –¥–ª—è Android (240p), 500kbps –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        audioBitsPerSecond: isAndroid ? 32000 : 64000,    // 32kbps –¥–ª—è Android (–º–æ–Ω–æ), 64kbps –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
      });
      console.log('MediaRecorder —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');

      chunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', event.data.size, '–±–∞–π—Ç');
        if (event.data.size > 0) {
          chunksRef.current.push(event.data);
        }
      };

      mediaRecorder.onstop = async () => {
        console.log('–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤:', chunksRef.current.length);
        
        // –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP4 –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
        const originalBlob = new Blob(chunksRef.current, { type: selectedFormat || 'video/mp4' });
        console.log('–°–æ–∑–¥–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π blob —Ä–∞–∑–º–µ—Ä–æ–º:', originalBlob.size, '–±–∞–π—Ç');
        
        let finalBlob = originalBlob;
        
        // –î–ª—è Android: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ —Å–∂–∏–º–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (isAndroid && originalBlob.size > 20 * 1024 * 1024) { // –ë–æ–ª–µ–µ 20MB
          console.log('üîß –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è Android, –ø—Ä–∏–º–µ–Ω—è—é —Å–∂–∞—Ç–∏–µ...');
          try {
            finalBlob = await compressVideoForAndroid(originalBlob, selectedFormat || 'video/mp4');
            console.log('‚úÖ –í–∏–¥–µ–æ —Å–∂–∞—Ç–æ —Å', originalBlob.size, '–¥–æ', finalBlob.size, '–±–∞–π—Ç');
          } catch (compressionError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ä–∏–≥–∏–Ω–∞–ª:', compressionError);
            finalBlob = originalBlob;
          }
        }
        
        setVideoState(prev => ({ 
          ...prev, 
          recordedBlob: finalBlob, 
          isRecording: false 
        }));
        
        if (videoRef.current) {
          videoRef.current.srcObject = null;
        }
        
        stream.getTracks().forEach(track => track.stop());
      };

      mediaRecorder.onstart = () => {
        console.log('–ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å');
      };

      mediaRecorder.onerror = (event) => {
        console.error('–û—à–∏–±–∫–∞ MediaRecorder:', event);
      };

      mediaRecorderRef.current = mediaRecorder;
      console.log('–ó–∞–ø—É—Å–∫–∞—é –∑–∞–ø–∏—Å—å...');
      mediaRecorder.start();

      setVideoState(prev => ({ 
        ...prev, 
        isRecording: true, 
        stream 
      }));

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ.');
    }
  }, []);

  const stopRecording = useCallback(() => {
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å...');
    if (mediaRecorderRef.current && videoState.isRecording) {
      console.log('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é MediaRecorder...');
      mediaRecorderRef.current.stop();
    } else {
      console.log('MediaRecorder –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –≤–µ–¥–µ—Ç—Å—è');
    }
  }, [videoState.isRecording]);

  const retakeVideo = useCallback(() => {
    setVideoState({
      isRecording: false,
      recordedBlob: null,
      stream: null,
    });
    chunksRef.current = [];
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á–∞–Ω–∫–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ
  const uploadVideoInChunks = useCallback(async (videoBlob: Blob) => {
    const CHUNK_SIZE = 5 * 1024 * 1024; // 5MB —á–∞–Ω–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    const totalChunks = Math.ceil(videoBlob.size / CHUNK_SIZE);
    const uploadId = Date.now().toString();
    
    console.log(`üì¶ –†–∞–∑–¥–µ–ª—è—é –≤–∏–¥–µ–æ –Ω–∞ ${totalChunks} —á–∞—Å—Ç–µ–π –ø–æ ${CHUNK_SIZE / 1024 / 1024}MB`);
    
    for (let i = 0; i < totalChunks; i++) {
      const start = i * CHUNK_SIZE;
      const end = Math.min(start + CHUNK_SIZE, videoBlob.size);
      const chunk = videoBlob.slice(start, end);
      
      const chunkFormData = new FormData();
      chunkFormData.append('chunk', chunk, `chunk-${i}.mp4`);
      chunkFormData.append('uploadId', uploadId);
      chunkFormData.append('chunkIndex', i.toString());
      chunkFormData.append('totalChunks', totalChunks.toString());
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤—ã–π —á–∞–Ω–∫
      if (i === 0) {
        chunkFormData.append('comments', comments);
        if (location) {
          chunkFormData.append('location', JSON.stringify(location));
        }
      }
      
      const chunkResponse = await fetch('https://functions.poehali.dev/56850dbd-ea0f-428f-b6e0-1814383f74c6', {
        method: 'POST',
        body: chunkFormData,
      });
      
      if (!chunkResponse.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ ${i + 1}/${totalChunks}`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const progress = Math.floor(((i + 1) / totalChunks) * 100);
      setUploadProgress(progress);
      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å ${i + 1}/${totalChunks} (${progress}%)`);
    }
    
    console.log('üéâ –í—Å–µ —á–∞—Å—Ç–∏ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!');
    return { success: true, message: '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' };
  }, [comments, location]);

  const submitLead = useCallback(async () => {
    if (!comments.trim() || !videoState.recordedBlob) {
      return;
    }

    setIsSubmitting(true);
    setUploadProgress(0);

    const isAndroid = /Android/i.test(navigator.userAgent);
    const videoBlob = videoState.recordedBlob;
    const isLargeVideo = videoBlob.size > 20 * 1024 * 1024; // –ë–æ–ª—å—à–µ 20MB

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ:', {
      size: `${(videoBlob.size / 1024 / 1024).toFixed(1)}MB`,
      isAndroid,
      isLargeVideo,
      strategy: isAndroid && isLargeVideo ? 'chunks' : 'standard'
    });

    try {
      let result;
      
      if (isAndroid && isLargeVideo) {
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞–Ω–∫–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è Android');
        result = await uploadVideoInChunks(videoBlob);
      } else {
        console.log('üì° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞');
        
        const formData = new FormData();
        formData.append('comments', comments);
        formData.append('video', videoBlob, 'lead-video.mp4');
        
        if (location) {
          formData.append('location', JSON.stringify(location));
        }

        // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        const progressInterval = setInterval(() => {
          setUploadProgress(prev => {
            if (prev >= 90) return prev;
            return prev + Math.random() * 15;
          });
        }, 200);

        const response = await fetch('https://functions.poehali.dev/56850dbd-ea0f-428f-b6e0-1814383f74c6', {
          method: 'POST',
          body: formData,
        });

        clearInterval(progressInterval);
        
        if (response.ok) {
          result = await response.json();
        } else {
          const error = await response.json();
          throw new Error(error.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
        }
      }
      
      setUploadProgress(100);
      console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
      
      setTimeout(() => {
        setIsSuccess(true);
      }, 500);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      alert(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
    } finally {
      setTimeout(() => {
        setIsSubmitting(false);
        setUploadProgress(0);
      }, 500);
    }
  }, [comments, videoState.recordedBlob, location, uploadVideoInChunks]);

  const createNewLead = useCallback(() => {
    setComments('');
    setVideoState({
      isRecording: false,
      recordedBlob: null,
      stream: null,
    });
    setIsSuccess(false);
    setUploadProgress(0);
    setLocation(null);
    chunksRef.current = [];
  }, []);

  if (isSuccess) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center p-6">
        <div className="w-full max-w-sm text-center">
          <div className="w-16 h-16 mx-auto mb-6 bg-green-500 rounded-full flex items-center justify-center">
            <Icon name="Check" size={24} className="text-white" />
          </div>
          <h2 className="text-2xl font-medium text-gray-900 mb-6">
            –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
          </h2>
          <button 
            onClick={createNewLead}
            className="w-full bg-blue-500 text-white py-3 px-6 rounded-lg hover:bg-blue-600 transition-colors"
          >
            –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-4xl mx-auto px-6 py-12">
        
        <div className="text-center mb-12">
          <h1 className="text-3xl font-medium text-gray-900 mb-4">
            –°–æ–∑–¥–∞–π—Ç–µ –õ–∏–¥
          </h1>
        </div>

        <div className="grid md:grid-cols-2 gap-8 mb-12">
          
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
              </label>
              <textarea
                placeholder="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                value={comments}
                onChange={(e) => setComments(e.target.value)}
                className="w-full h-32 p-4 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none resize-none"
                maxLength={500}
              />
            </div>
          </div>

          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                –í–∏–¥–µ–æ
              </label>
              
              <div className="relative">
                {/* –°–∫—Ä—ã—Ç–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ */}
                <video
                  ref={videoRef}
                  className="hidden"
                  muted
                  playsInline
                />
                
                {/* –ó–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ –ø—Ä–µ–≤—å—é */}
                <div className="w-full h-48 bg-gray-100 rounded-lg flex items-center justify-center border border-gray-200">
                  <div className="text-center">
                    {!videoState.isRecording && !videoState.recordedBlob && (
                      <>
                        <Icon name="Camera" size={32} className="text-gray-400 mx-auto mb-2" />
                        <p className="text-gray-500">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø–∏—Å–∏</p>
                      </>
                    )}
                    
                    {videoState.isRecording && (
                      <p className="text-black font-medium">IMPERIA PROMO</p>
                    )}
                    
                    {videoState.recordedBlob && !videoState.isRecording && (
                      <>
                        <Icon name="CheckCircle" size={32} className="text-green-500 mx-auto mb-2" />
                        <p className="text-green-600 font-medium">–í–∏–¥–µ–æ –∑–∞–ø–∏—Å–∞–Ω–æ</p>
                      </>
                    )}
                  </div>
                </div>
              </div>

              <div className="mt-4 space-y-3">
                {!videoState.isRecording && !videoState.recordedBlob && (
                  <button 
                    onClick={startRecording}
                    className="w-full bg-blue-500 text-white py-3 px-4 rounded-lg hover:bg-blue-600 transition-colors"
                  >
                    –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
                  </button>
                )}

                {videoState.isRecording && (
                  <button 
                    onClick={stopRecording}
                    className="w-full bg-black text-white py-3 px-4 rounded-lg hover:bg-gray-800 transition-colors"
                  >
                    –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                  </button>
                )}

                {videoState.recordedBlob && !videoState.isRecording && (
                  <div className="flex space-x-3">
                    <button 
                      onClick={retakeVideo}
                      className="flex-1 bg-gray-100 text-gray-700 py-3 px-4 rounded-lg hover:bg-gray-200 transition-colors"
                    >
                      –ü–µ—Ä–µ—Å–Ω—è—Ç—å
                    </button>
                    <div className="flex items-center px-4 py-3 bg-green-50 text-green-700 rounded-lg">
                      <Icon name="Check" className="w-4 h-4 mr-2" />
                      –ì–æ—Ç–æ–≤–æ
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        <div className="text-center space-y-4">
          {isSubmitting && (
            <div className="max-w-md mx-auto">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ</span>
                <span className="text-sm font-medium text-black">{Math.round(uploadProgress)}%</span>
              </div>
              <Progress 
                value={uploadProgress} 
                className="h-2 bg-gray-200"
              />
              <div className="mt-2 text-xs text-gray-500">
                {uploadProgress < 30 && "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∏–¥–µ–æ..."}
                {uploadProgress >= 30 && uploadProgress < 60 && "–°–∂–∞—Ç–∏–µ —Ñ–∞–π–ª–∞..."}
                {uploadProgress >= 60 && uploadProgress < 90 && "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram..."}
                {uploadProgress >= 90 && uploadProgress < 100 && "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ..."}
                {uploadProgress >= 100 && "–ì–æ—Ç–æ–≤–æ!"}
              </div>
            </div>
          )}
          
          <button 
            onClick={submitLead}
            disabled={!comments.trim() || !videoState.recordedBlob || isSubmitting}
            className={`px-8 py-4 rounded-lg font-medium transition-all duration-200 ${
              (!comments.trim() || !videoState.recordedBlob || isSubmitting) 
                ? 'bg-gray-200 text-gray-400 cursor-not-allowed' 
                : 'bg-blue-500 text-white hover:bg-blue-600 hover:scale-105'
            }`}
          >
            {isSubmitting ? (
              <div className="flex items-center justify-center space-x-2">
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                <span>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...</span>
              </div>
            ) : (
              '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'
            )}
          </button>
        </div>
      </div>
    </div>
  );
};

export default Index;